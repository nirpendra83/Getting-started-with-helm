var relearn_searchindex = [
  {
    "breadcrumb": "Introduction to Helm \u003e Introduction to Helm",
    "content": "📌 Introduction to Helm What is Helm? Why use Helm for Kubernetes application deployment? Key components: Charts, Repositories, Releases 📚 Exploring the Official Helm Documentation Navigating helm.sh/docs Installation and prerequisites Understanding the Helm CLI and commands Helm 3 vs Helm 2 (brief overview) 🧩 Working with Existing Helm Charts 🔍 Discovering and Using Helm Repositories Adding public and private chart repositories Searching for charts (helm search hub vs helm search repo) Repository management commands 🚀 Deploying a Helm Release Installing a chart as a release Setting a namespace for the deployment Dry run and debug before actual deployment ⚙️ Customizing Charts with Values Understanding values.yaml Overriding values using: Custom values.yaml files --set CLI option --set-file and --set-string 🔁 Managing Helm Releases Upgrading a release with updated values or chart versions Rolling back to a previous release version Viewing and diffing historical release versions Uninstalling a release cleanly 🌐 Multi-Environment Helm Usage Structuring values for different environments (dev, staging, prod) Folder-based environment separation Using --values with multiple files for environment-specific configs 🛠️ Creating Your Own Helm Charts ⚡ Helm Chart Quick Start helm create mychart Directory structure explained Modifying the default template 🧬 Helm Template Engine and Syntax How Helm renders templates Using {{ .Values }}, {{ .Chart }}, {{ .Release }} objects 🏗 Built-in Objects and Functions Overview of available Helm objects Useful template functions (include, required, lookup, toYaml, etc.) Best practices in chart templating 🧪 Testing and Validating Charts helm lint and template validation Using helm template for local rendering Unit testing templates with tools like helm-unittest 🧰 Troubleshooting and Tips Debugging with --debug and --dry-run Common errors and how to fix them Checking logs and Helm release history Understanding exit codes and command output",
    "description": "📌 Introduction to Helm What is Helm? Why use Helm for Kubernetes application deployment? Key components: Charts, Repositories, Releases 📚 Exploring the Official Helm Documentation Navigating helm.sh/docs Installation and prerequisites Understanding the Helm CLI and commands Helm 3 vs Helm 2 (brief overview) 🧩 Working with Existing Helm Charts 🔍 Discovering and Using Helm Repositories Adding public and private chart repositories Searching for charts (helm search hub vs helm search repo) Repository management commands 🚀 Deploying a Helm Release Installing a chart as a release Setting a namespace for the deployment Dry run and debug before actual deployment ⚙️ Customizing Charts with Values Understanding values.yaml Overriding values using: Custom values.yaml files --set CLI option --set-file and --set-string 🔁 Managing Helm Releases Upgrading a release with updated values or chart versions Rolling back to a previous release version Viewing and diffing historical release versions Uninstalling a release cleanly 🌐 Multi-Environment Helm Usage Structuring values for different environments (dev, staging, prod) Folder-based environment separation Using --values with multiple files for environment-specific configs 🛠️ Creating Your Own Helm Charts ⚡ Helm Chart Quick Start helm create mychart Directory structure explained Modifying the default template 🧬 Helm Template Engine and Syntax How Helm renders templates Using {{ .Values }}, {{ .Chart }}, {{ .Release }} objects 🏗 Built-in Objects and Functions Overview of available Helm objects Useful template functions (include, required, lookup, toYaml, etc.) Best practices in chart templating 🧪 Testing and Validating Charts helm lint and template validation Using helm template for local rendering Unit testing templates with tools like helm-unittest 🧰 Troubleshooting and Tips Debugging with --debug and --dry-run Common errors and how to fix them Checking logs and Helm release history Understanding exit codes and command output",
    "tags": [],
    "title": "Helm Contents",
    "uri": "/helm/toc/index.html"
  },
  {
    "breadcrumb": "Introduction to Helm \u003e Introduction to Helm",
    "content": "📦 Session 1: Introduction to Helm Helm is the package manager for Kubernetes, designed to simplify deployment, configuration, and lifecycle management of Kubernetes applications using reusable packages called charts.\n⚙️ Prerequisites Before using Helm, ensure the following:\n✅ A working Kubernetes cluster ✅ kubectl configured to access the cluster ✅ Helm CLI installed on your local system 🔧 Install Helm curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash 🧩 Verify Helm Installation helm version 🌐 How Helm Connects to Kubernetes Helm does not need a server component (like Tiller in v2). It uses:\nYour existing kubeconfig file (~/.kube/config) Communicates directly with Kubernetes API server Uses standard Kubernetes resources: Deployments, Services, Secrets, etc. Releases are tracked in your cluster (by default stored as Kubernetes Secrets) In essence, Helm is just another Kubernetes client, like kubectl, but focused on packages.\n🚀 Getting Started: Using Existing Helm Charts The fastest way to start with Helm is by installing applications using public charts.\n1️⃣ Add a Chart Repository helm repo add bitnami https://charts.bitnami.com/bitnami 2️⃣ Update the Repository Cache helm repo update 3️⃣ Search for a Chart helm search repo nginx 4️⃣ Install a Chart helm install my-nginx bitnami/nginx This command installs the nginx chart from the Bitnami repo as a release named my-nginx.\n5️⃣ Verify the Installation helm list kubectl get all 🧰 Helm Is Like APT/YUM for Kubernetes Platform Install Method Example Linux apt install nginx Installs NGINX on system Kubernetes helm install nginx Installs NGINX in cluster 🧱 Helm Components Overview Component Description Chart Packaged application with Kubernetes templates Repository Collection of charts (public or private) Release Installed instance of a chart in your cluster Helm CLI Interface to install, upgrade, uninstall, or inspect charts 📦 Helm Chart Anatomy A Helm chart is a structured directory containing:\nmychart/ ├── Chart.yaml # Chart metadata ├── values.yaml # Default config values ├── templates/ # Kubernetes YAML templates ├── charts/ # Subcharts (optional) └── README.md # Documentation (optional) 🛠️ Create a Chart helm create myapp 🚢 Helm Repositories Helm repositories host charts and can be added easily:\nhelm repo add bitnami https://charts.bitnami.com/bitnami helm repo update helm repo list 🚀 Helm Releases A release is a deployed instance of a chart.\nCommon Release Commands: # Install helm install my-nginx bitnami/nginx # List helm list # Upgrade helm upgrade my-nginx bitnami/nginx # Roll back helm rollback my-nginx 1 # Uninstall helm uninstall my-nginx 🔧 Customizing Installations Using --set (inline): helm install my-nginx bitnami/nginx \\ --set service.type=NodePort \\ --set replicaCount=2 Using --values (file): helm install my-nginx bitnami/nginx -f custom-values.yaml Combine both: helm install my-nginx bitnami/nginx \\ -f base.yaml \\ --set service.type=LoadBalancer 🔍 Preview and Debug Charts Preview manifests without installing: helm template my-nginx bitnami/nginx Dry-run install: helm install my-nginx bitnami/nginx --dry-run --debug 📥 Get and Customize Chart Values Show default values: helm show values bitnami/nginx Save for customization: helm show values bitnami/nginx \u003e custom-values.yaml Then install with:\nhelm install my-nginx bitnami/nginx -f custom-values.yaml 📄 Get Values from a Running Release helm get values my-nginx -n default --all 🧠 Helm v2 vs v3 Feature Helm v2 Helm v3 Tiller Component ✅ Required ❌ Removed Security (RBAC) Complex Simplified CRD Support Via Hooks Native Support Release Namespacing Global Scoped to Namespace Chart Repositories Helm Hub only Helm Hub + OCI support Release Storage ConfigMaps Kubernetes Secrets Upgrade Strategy Two-step (client + Tiller) Single-step (client-only) Helm v3 is recommended. Use the 2to3 plugin to migrate from Helm v2.\n🧰 Common Helm CLI Reference # Add repo helm repo add \u003cname\u003e \u003curl\u003e # Update repos helm repo update # Search helm search repo \u003ckeyword\u003e # Install helm install \u003crelease-name\u003e \u003cchart\u003e # Upgrade helm upgrade \u003crelease-name\u003e \u003cchart\u003e # Rollback helm rollback \u003crelease-name\u003e \u003crevision\u003e # Uninstall helm uninstall \u003crelease-name\u003e # Get installed values helm get values \u003crelease-name\u003e -n \u003cnamespace\u003e --all # Show default values helm show values \u003cchart-name\u003e ✅ Summary Helm simplifies app deployment on Kubernetes via reusable charts. Works with your kubeconfig—no need for server-side components. Helm v3 is modern, secure, and CI/CD-friendly. Start by using existing charts, then build and customize your own. Mastering Helm is essential for Kubernetes-based DevOps and GitOps workflows.",
    "description": "📦 Session 1: Introduction to Helm Helm is the package manager for Kubernetes, designed to simplify deployment, configuration, and lifecycle management of Kubernetes applications using reusable packages called charts.\n⚙️ Prerequisites Before using Helm, ensure the following:\n✅ A working Kubernetes cluster ✅ kubectl configured to access the cluster ✅ Helm CLI installed on your local system 🔧 Install Helm curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash 🧩 Verify Helm Installation helm version 🌐 How Helm Connects to Kubernetes Helm does not need a server component (like Tiller in v2). It uses:",
    "tags": [],
    "title": "Session 1: Introduction to Helm",
    "uri": "/helm/session01/index.html"
  },
  {
    "breadcrumb": "Introduction to Helm \u003e Introduction to Helm",
    "content": "🎯 Session 2: Creating and Hosting Custom Helm Charts In this session, you’ll learn to:\n✅ Create your own Helm charts from scratch ✅ Customize templates and use values effectively ✅ Understand and use _helpers.tpl ✅ Host charts on GitHub as a Helm repository ✅ Apply real-world scenarios (Ingress, ConfigMap, HPA) 🛠️ Step 1: Create a Custom Chart helm create nginx-demo cd nginx-demo This creates the following structure:\nnginx-demo/ ├── charts/ ├── Chart.yaml ├── templates/ │ ├── deployment.yaml │ ├── _helpers.tpl │ ├── hpa.yaml │ ├── ingress.yaml │ ├── service.yaml │ ├── configmap.yaml │ └── tests/ └── values.yaml 📄 What is _helpers.tpl? _helpers.tpl is a special file used to define reusable template snippets using Go’s template syntax. It’s where you can define helper functions like naming conventions or labels, which you can include in other templates using {{ include \"name\" . }}.\n✅ Example: _helpers.tpl {{- define \"nginx-demo.name\" -}}\rnginx\r{{- end }}\r{{- define \"nginx-demo.fullname\" -}}\r{{ .Release.Name }}-nginx\r{{- end }}\r{{- define \"nginx-demo.labels\" -}}\rapp.kubernetes.io/name: {{ include \"nginx-demo.name\" . }}\rhelm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}\rapp.kubernetes.io/instance: {{ .Release.Name }}\rapp.kubernetes.io/managed-by: {{ .Release.Service }}\r{{- end }}\r{{- define \"nginx-demo.serviceAccountName\" -}}\r{{- if .Values.serviceAccount.name }}\r{{ .Values.serviceAccount.name }}\r{{- else }}\r{{ include \"nginx-demo.fullname\" . }}\r{{- end }}\r{{- end }} 📌 Usage in Other Templates metadata: name: {{ include \"nginx-demo.fullname\" . }} labels: {{- include \"nginx-demo.labels\" . | nindent 4 }} This avoids duplication and keeps your chart DRY (Don’t Repeat Yourself).\n📦 Custom values.yaml replicaCount: 2 image: repository: nginx pullPolicy: IfNotPresent tag: \"1.25.2\" service: type: ClusterIP port: 80 ingress: enabled: true className: \"nginx\" annotations: nginx.ingress.kubernetes.io/rewrite-target: / hosts: - host: nginx.local paths: - path: / pathType: Prefix config: message: \"Welcome to Helm-powered NGINX!\" autoscaling: enabled: true minReplicas: 2 maxReplicas: 5 targetCPUUtilizationPercentage: 70 resources: {} nodeSelector: {} tolerations: [] affinity: {} ⚙️ Templates Overview 🔸 deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: {{ include \"nginx-demo.fullname\" . }} labels: {{- include \"nginx-demo.labels\" . | nindent 4 }} spec: replicas: {{ .Values.replicaCount }} selector: matchLabels: app: {{ include \"nginx-demo.name\" . }} template: metadata: labels: app: {{ include \"nginx-demo.name\" . }} spec: containers: - name: nginx image: \"{{ .Values.image.repository }}:{{ .Values.image.tag }}\" imagePullPolicy: {{ .Values.image.pullPolicy }} ports: - containerPort: 80 env: - name: APP_MESSAGE valueFrom: configMapKeyRef: name: {{ include \"nginx-demo.fullname\" . }} key: appMessage 🔸 service.yaml apiVersion: v1 kind: Service metadata: name: {{ include \"nginx-demo.fullname\" . }} spec: type: {{ .Values.service.type }} ports: - port: {{ .Values.service.port }} targetPort: 80 selector: app: {{ include \"nginx-demo.name\" . }} 🔸 configmap.yaml apiVersion: v1 kind: ConfigMap metadata: name: {{ include \"nginx-demo.fullname\" . }} data: appMessage: {{ .Values.config.message | quote }} 🔸 ingress.yaml {{- if .Values.ingress.enabled }} apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: {{ include \"nginx-demo.fullname\" . }} annotations: {{- range $key, $value := .Values.ingress.annotations }} {{ $key }}: {{ $value | quote }} {{- end }} spec: ingressClassName: {{ .Values.ingress.className }} rules: {{- range .Values.ingress.hosts }} - host: {{ .host }} http: paths: {{- range .paths }} - path: {{ .path }} pathType: {{ .pathType }} backend: service: name: {{ include \"nginx-demo.fullname\" $ }} port: number: {{ $.Values.service.port }} {{- end }} {{- end }} {{- end }} 🔸 hpa.yaml {{- if .Values.autoscaling.enabled }} apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: {{ include \"nginx-demo.fullname\" . }} spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: {{ include \"nginx-demo.fullname\" . }} minReplicas: {{ .Values.autoscaling.minReplicas }} maxReplicas: {{ .Values.autoscaling.maxReplicas }} metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }} {{- end }} 🧪 Run the Chart helm install my-nginx ./nginx-demo helm test my-nginx 🌐 Host Helm Charts on GitHub Step 1: Create and Package mkdir helm-registry \u0026\u0026 cd helm-registry helm create order helm create delivery helm package order helm package delivery helm repo index . Step 2: Push to GitHub git init git remote add origin https://github.com/\u003cyour-username\u003e/helm-registry.git git add . git commit -m \"Add Order and Delivery Charts\" git push -u origin main Enable GitHub Pages on the repository (Settings → Pages).\nStep 3: Add and Use Repo helm repo add teamcharts https://\u003cyour-username\u003e.github.io/helm-registry helm repo update helm install order-app teamcharts/order helm install delivery-app teamcharts/delivery ✅ Summary Topic Description _helpers.tpl Defines reusable template logic (naming, labels, etc.) values.yaml Central place for all configuration values Templates Refer to values and helpers using Go templating Hosting GitHub Pages serves .tgz charts and index.yaml as a repo Real-World Additions ConfigMap, Ingress, Autoscaling (HPA) support",
    "description": "🎯 Session 2: Creating and Hosting Custom Helm Charts In this session, you’ll learn to:\n✅ Create your own Helm charts from scratch ✅ Customize templates and use values effectively ✅ Understand and use _helpers.tpl ✅ Host charts on GitHub as a Helm repository ✅ Apply real-world scenarios (Ingress, ConfigMap, HPA) 🛠️ Step 1: Create a Custom Chart helm create nginx-demo cd nginx-demo This creates the following structure:\nnginx-demo/ ├── charts/ ├── Chart.yaml ├── templates/ │ ├── deployment.yaml │ ├── _helpers.tpl │ ├── hpa.yaml │ ├── ingress.yaml │ ├── service.yaml │ ├── configmap.yaml │ └── tests/ └── values.yaml 📄 What is _helpers.tpl? _helpers.tpl is a special file used to define reusable template snippets using Go’s template syntax. It’s where you can define helper functions like naming conventions or labels, which you can include in other templates using {{ include \"name\" . }}.",
    "tags": [],
    "title": "Session 2: Creating and Hosting Custom Helm Charts",
    "uri": "/helm/session02/index.html"
  },
  {
    "breadcrumb": "Introduction to Helm \u003e Introduction to Helm",
    "content": "Template Functions and Pipelines\n🧭 Helm Template Functions Cheat Sheet with Examples This document provides a comprehensive list of Helm template functions used in Helm charts, with real-world examples using .Values, .Chart, and .Release.\n🔧 Commonly Used Functions 🗝️ default – Provide a fallback value replicaCount: {{ .Values.replicaCount | default 3 }} If .Values.replicaCount is not set in values.yaml, it defaults to 3.\n❗ required – Make a value mandatory apiVersion: v1 kind: Secret metadata: name: my-secret data: password: {{ required \"A password is required!\" .Values.password | b64enc }} apiVersion: v1 kind: Secret metadata: name: my-secret data: {{- if .Values.password }} password: {{ .Values.password | b64enc | quote }} {{- else }} password: \"\" {{- end }} Will throw an error at install/upgrade if password is not provided.\nHow to render yaml files from new charts helm template my-nginx01 ./nginx-demo -n helm-test --debug 🔤 String Functions upper, lower, title, trim, replace metadata: name: {{ .Chart.Name | upper }}-{{ .Release.Name | lower }} annotations: summary: {{ .Values.summary | title | quote }} Transforms strings:\nhelm → HELM release-name → release-name some text → Some Text annotations: clean-name: {{ replace .Chart.Name \"-\" \"_\" }} Replaces hyphens (-) with underscores (_) in the chart name.\nUseful for making label-safe names.\n🔢 Number Functions add, sub, mul, div, mod resources: limits: cpu: {{ mul .Values.cpuBase .Values.cpuFactor }} replicaCount: {{ add 2 3 }} # Output: 5 Perform arithmetic using Helm values.\n📃 List Functions list, join, first, last, uniq, range ✅ Example: Looping with range and list env: {{- range $env := list \"STAGING\" \"PROD\" \"DEV\" }} - name: ENV value: {{ $env }} {{- end }} Loops over the list and renders each value as an environment variable.\nRendered output:\nenv: - name: ENV value: STAGING - name: ENV value: PROD - name: ENV value: DEV ✅ Example: join – Convert a list to comma-separated string labels: environments: {{ join \",\" (list \"dev\" \"staging\" \"prod\") }} Converts list to string: dev,staging,prod.\n✅ Example: uniq – Remove duplicates from list uniq-values: {{ uniq (list 1 2 2 3 1) }} # Output: [1 2 3] Removes duplicate values.\nUse join if you need to convert it to string for use in annotations/labels.\n🗂️ Dictionary/Object Functions dict, hasKey, pluck, keys {{- $config := dict \"env\" \"prod\" \"region\" \"us-west\" }} region: {{ $config.region }} {{- if hasKey .Values \"replicaCount\" }} replicas: {{ .Values.replicaCount }} {{- end }} These functions help dynamically access and iterate through key-value pairs.\n🔁 Flow Control if, else, range, with {{- if .Values.enabled }} metadata: labels: enabled: \"true\" {{- else }} metadata: labels: enabled: \"false\" {{- end }} {{- range $key, $val := .Values.config }} {{ $key }}: {{ $val }} {{- end }} in Values.yaml config: timeout: 30s retries: 5 logLevel: debug {{- with .Values.database }} host: {{ .host }} port: {{ .port }} {{- end }} in Values.yaml database: host: db.example.com port: 5432 Conditional logic and scoping for clean, DRY templates.\n🔐 Crypto \u0026 Encoding b64enc, b64dec, sha256sum data: password: {{ .Values.dbPassword | b64enc }} hashed: {{ \"sensitive\" | sha256sum }} Useful for secrets, hashing, and safe encoding.\n🕒 Date \u0026 Time (Limited) annotations: generatedAt: {{ now | date \"2006-01-02T15:04:05Z07:00\" }} now returns current timestamp.\nFormat it using Go time layout (2006-01-02 is the reference format).\n🧪 Example values.yaml replicaCount: 2 enabled: true summary: \"simple chart\" cpuBase: 100 cpuFactor: 2 password: \"secret123\" dbPassword: \"admin\" envList: - name: ENV value: PROD config: LOG_LEVEL: debug TIMEOUT: 30 database: host: db.example.com port: 5432 services: service1: port: 80 service2: port: 443",
    "description": "Template Functions and Pipelines\n🧭 Helm Template Functions Cheat Sheet with Examples This document provides a comprehensive list of Helm template functions used in Helm charts, with real-world examples using .Values, .Chart, and .Release.\n🔧 Commonly Used Functions 🗝️ default – Provide a fallback value replicaCount: {{ .Values.replicaCount | default 3 }} If .Values.replicaCount is not set in values.yaml, it defaults to 3.\n❗ required – Make a value mandatory apiVersion: v1 kind: Secret metadata: name: my-secret data: password: {{ required \"A password is required!\" .Values.password | b64enc }} apiVersion: v1 kind: Secret metadata: name: my-secret data: {{- if .Values.password }} password: {{ .Values.password | b64enc | quote }} {{- else }} password: \"\" {{- end }} Will throw an error at install/upgrade if password is not provided.",
    "tags": [],
    "title": "Helm unctions",
    "uri": "/helm/helmfunctions/index.html"
  },
  {
    "breadcrumb": "Introduction to Helm \u003e Introduction to Helm",
    "content": "🔍 Preview Manifests Before Installing To preview the rendered Kubernetes manifests from a Helm chart without installing it, use:\nhelm template \u003crelease-name\u003e \u003cchart-path-or-name\u003e Example: helm template my-nginx bitnami/nginx 🧪 Simulate Installation (Dry Run) To simulate an install with all validations (including custom values):\nhelm install \u003crelease-name\u003e \u003cchart-path-or-name\u003e --dry-run --debug Example: helm install my-nginx bitnami/nginx --dry-run --debug 📥 Get Values from Existing Release To retrieve the custom values used in an existing Helm release:\nhelm get values \u003crelease-name\u003e -n \u003cnamespace\u003e Example: helm get values my-nginx -n default To get all values including defaults and overrides (merged output):\nhelm get values \u003crelease-name\u003e -n \u003cnamespace\u003e --all Example: helm get values my-nginx -n default --all 📄 Get Default values.yaml from a Helm Chart To get the default values.yaml file from a Helm chart before installing it, use:\nhelm show values \u003cchart-name\u003e 📦 Example (from a remote repository): helm show values bitnami/nginx 📁 Example (from a local chart directory): helm show values ./mychart This command prints all the default configuration options supported by the chart.\n💾 Save Default Values for Customization You can redirect the output to a file, edit it, and use it during installation:\nhelm show values bitnami/nginx \u003e custom-values.yaml Then install with:\nhelm install my-nginx bitnami/nginx --values custom-values.yaml ✅ This is a best practice for controlled and repeatable deployments.\n🔧 Using -f, --values, and --set in Helm Helm allows customization of charts using:\n-f or --values to supply a YAML file with configuration overrides. --set to pass values inline via the command line. 📁 Using -f or --values (YAML file) helm install my-nginx bitnami/nginx -f custom-values.yaml helm upgrade my-nginx bitnami/nginx -f dev-values.yaml -n dev You can also supply multiple files in order of precedence:\nhelm install my-nginx bitnami/nginx -f base.yaml -f prod.yaml The last file overrides values from the previous ones.\n💡 Using --set (Inline values) Set a single value inline:\nhelm install my-nginx bitnami/nginx --set service.type=LoadBalancer Set multiple values inline:\nhelm install my-nginx bitnami/nginx \\ --set replicaCount=2 \\ --set image.tag=1.23.0 \\ --set service.type=NodePort 🔄 Combine --set and --values You can combine both options. Inline --set overrides the values in the file:\nhelm install my-nginx bitnami/nginx \\ -f custom-values.yaml \\ --set service.type=LoadBalancer 📝 Set Nested/Array Values with --set For nested keys:\nhelm install my-nginx bitnami/nginx \\ --set metrics.enabled=true \\ --set ingress.enabled=true \\ --set ingress.hostname=nginx.example.com ✅ Use --values for maintainable configurations,\n✅ Use --set for quick overrides or scripting.",
    "description": "🔍 Preview Manifests Before Installing To preview the rendered Kubernetes manifests from a Helm chart without installing it, use:\nhelm template \u003crelease-name\u003e \u003cchart-path-or-name\u003e Example: helm template my-nginx bitnami/nginx 🧪 Simulate Installation (Dry Run) To simulate an install with all validations (including custom values):\nhelm install \u003crelease-name\u003e \u003cchart-path-or-name\u003e --dry-run --debug Example: helm install my-nginx bitnami/nginx --dry-run --debug 📥 Get Values from Existing Release To retrieve the custom values used in an existing Helm release:",
    "tags": [],
    "title": "Additional",
    "uri": "/helm/additional/index.html"
  },
  {
    "breadcrumb": "Introduction to Helm",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Table of Contents Overview: What is Helm? Official Helm Documentation Working with Existing Helm Charts Adding and Managing Repositories Installing a Helm Release Using and Customizing values.yaml Overriding Values with --set Upgrading an Existing Release Rolling Back to a Previous Release Viewing Current Values of a Release Managing Multiple Environments Debugging and Dry Runs Creating Helm Charts Quick Start Guide Template Syntax \u0026 Structure Built-in Template Objects Overview: What is Helm? Helm is the package manager for Kubernetes. It enables developers and operators to package, configure, deploy, and manage applications on Kubernetes clusters using Helm charts—predefined templates that streamline complex deployments.\nPrerequisites Before you begin, ensure you have:\nA basic understanding of Kubernetes concepts Familiarity with Linux command-line operations Required Tools To follow along and perform hands-on tasks, you’ll need:\nVisual Studio Code (VSCode) or any preferred text editor The kubectl CLI to interact with Kubernetes The Helm CLI (helm) installed and configured Hands-On Labs This guide includes practical labs where you’ll learn how to:\nDeploy applications using publicly available Helm charts Customize deployments by editing chart values Create and deploy your own Helm charts Use Helm’s core features such as install, upgrade, rollback, and templating",
    "description": "Table of Contents Overview: What is Helm? Official Helm Documentation Working with Existing Helm Charts Adding and Managing Repositories Installing a Helm Release Using and Customizing values.yaml Overriding Values with --set Upgrading an Existing Release Rolling Back to a Previous Release Viewing Current Values of a Release Managing Multiple Environments Debugging and Dry Runs Creating Helm Charts Quick Start Guide Template Syntax \u0026 Structure Built-in Template Objects Overview: What is Helm? Helm is the package manager for Kubernetes. It enables developers and operators to package, configure, deploy, and manage applications on Kubernetes clusters using Helm charts—predefined templates that streamline complex deployments.",
    "tags": [],
    "title": "Introduction to Helm",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Introduction to Helm",
    "content": "Table of Contents Overview: What is Helm? Official Helm Documentation Working with Existing Helm Charts Adding and Managing Repositories Installing a Helm Release Using and Customizing values.yaml Overriding Values with --set Upgrading an Existing Release Rolling Back to a Previous Release Viewing Current Values of a Release Managing Multiple Environments Debugging and Dry Runs Creating Helm Charts Quick Start Guide Template Syntax \u0026 Structure Built-in Template Objects Overview: What is Helm? Helm is the package manager for Kubernetes. It enables developers and operators to package, configure, deploy, and manage applications on Kubernetes clusters using Helm charts—predefined templates that streamline complex deployments.\nPrerequisites Before you begin, ensure you have:\nA basic understanding of Kubernetes concepts Familiarity with Linux command-line operations Required Tools To follow along and perform hands-on tasks, you’ll need:\nVisual Studio Code (VSCode) or any preferred text editor The kubectl CLI to interact with Kubernetes The Helm CLI (helm) installed and configured Hands-On Labs This guide includes practical labs where you’ll learn how to:\nDeploy applications using publicly available Helm charts Customize deployments by editing chart values Create and deploy your own Helm charts Use Helm’s core features such as install, upgrade, rollback, and templating",
    "description": "Table of Contents Overview: What is Helm? Official Helm Documentation Working with Existing Helm Charts Adding and Managing Repositories Installing a Helm Release Using and Customizing values.yaml Overriding Values with --set Upgrading an Existing Release Rolling Back to a Previous Release Viewing Current Values of a Release Managing Multiple Environments Debugging and Dry Runs Creating Helm Charts Quick Start Guide Template Syntax \u0026 Structure Built-in Template Objects Overview: What is Helm? Helm is the package manager for Kubernetes. It enables developers and operators to package, configure, deploy, and manage applications on Kubernetes clusters using Helm charts—predefined templates that streamline complex deployments.",
    "tags": [],
    "title": "Introduction to Helm",
    "uri": "/helm/index.html"
  },
  {
    "breadcrumb": "Introduction to Helm",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
